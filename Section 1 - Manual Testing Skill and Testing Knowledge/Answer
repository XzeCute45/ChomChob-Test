1.	หากต้องการ Design Test-case มี Technique อะไรบ้างที่สามารถช่วยให้การ Design Test-case เพื่อทดสอบระบบได้ครอบคลุม
-	Equivalence partitioning: จะใช้ในการทดสอบเว็ปไซต์โดยใช้การกำหนดค่าและนำค่าที่เป็นตัวแทนของแต่ละช่วงมาใช้ทดสอบ โดยวิธีการที่ใช้ตรวจสอบจะเป็นการตรวจสอบว่าเข้าเงื่อนไขใดๆที่กำหนดไว้หรือไม่
-	Boundary value analysis: จะเป็นการทดลองใช้ค่าที่กำหนดไว้ในแต่ละเงื่อนไขเช่น 0-99 is invalid / 100-999 is valid / more than 1000 is invalid จากนั้นก็ทดลองใช้ตัวเลขมาทดสอบว่าเข้าเงื่อนไขใด
-	Decision Table Testing: จะทดสอบโดยการสร้างเงื่อนไขทั้งหมดแล้วดูว่าเป็นเคส T หรือ F ในบทสรุปสุดท้าย
-	State Transition Testing: เป็นเทคนิคที่จะใช้ในการตรวจสอบสถานการณ์ทำงานของแต่ละ step ว่าควรเป็นไปตามที่คาดหวังไว้หรือไม่ ถ้าหากไม่ผ่านที่ step ใดก็หาสาเหตุว่าเป็นเพราะอะไร
-	Exploratory Testing: เป็นเทคนิคที่ใช้ความรู้และประสบการณ์ใช้งานในมุมมองของ user ท่านหนึ่งโดยการใช้เทคนิคนี้จะมีการใช้ร่วมกับเทคนิคอื่นๆเพิ่มเติมเพื่อให้มีการครอบคลุมทุกปัญหาที่จะเกิดขึ้นได้
2.	Design Test-case จากโจทย์ต่อไปนี้อย่างน้อย 5 Case พร้อมระบุ Technique ที่ใช้ข้อนั้น ๆ 
[โจทย์] : ผู้ใช้ต้องการโอน Point จากบัญชีตัวเอง ไปยังบัญชีปลายทาง โดยเงื่อนไขคือ 
•	ขั้นต่ำในการโอน Point คือ 100 / การทำรายการ 
•	สูงสุดในการโอน Point คือ 3,000 / การทำรายการ 
•	หากโอน < ขั้นต่ำ ระบบคิดค่า Fee 8 Point โดยบวกเพิ่มจากค่าที่กรอก 
•	ต้องกรอก Passcode 4 หลัก ให้ถูกต้องจึงทำรายการสำเร็จ 
•	บัญชีปลายทางต้องถูกต้อง จึงจะสามารถกรอก Passcode ได้
Test Case 1: โอน Point น้อยกว่าขั้นต่ำ
•	Input: จำนวน Point: 50, Passcode: 1234, บัญชีปลายทางถูกต้อง
•	Expected Result: ระบบคิดค่า Fee 8 Point รวมเป็น 58 Point และทำรายการสำเร็จ
•	Technique: Boundary Value Analysis
Test Case 2: โอน Point เท่ากับขั้นต่ำ
•	Input: จำนวน Point: 100, Passcode: 1234, บัญชีปลายทางถูกต้อง
•	Expected Result: ทำรายการสำเร็จ ไม่มีค่า Fee เพิ่มเติม
•	Technique: Boundary Value Analysis


Test Case 3: โอน Point มากกว่าขั้นต่ำและน้อยกว่าสูงสุด
•	Input: จำนวน Point: 1500, Passcode: 1234, บัญชีปลายทางถูกต้อง
•	Expected Result: ทำรายการสำเร็จ ไม่มีค่า Fee เพิ่มเติม
•	Technique: Equivalence Partitioning
Test Case 4: โอน Point เท่ากับสูงสุด
•	Input: จำนวน Point: 3000, Passcode: 1234, บัญชีปลายทางถูกต้อง
•	Expected Result: ทำรายการสำเร็จ ไม่มีค่า Fee เพิ่มเติม
•	Technique: Boundary Value Analysis
Test Case 5: โอน Point เกินกว่าสูงสุด
•	Input: จำนวน Point: 3500, Passcode: 1234, บัญชีปลายทางถูกต้อง
•	Expected Result: ระบบแจ้งข้อผิดพลาด ไม่สามารถทำรายการได้
•	Technique: Boundary Value Analysis
Test Case 6: กรอก Passcode ผิด
•	Input: จำนวน Point: 1000, Passcode: 5678, บัญชีปลายทางถูกต้อง
•	Expected Result: ระบบแจ้งข้อผิดพลาด ไม่สามารถทำรายการได้
•	Technique: Exploratory Testing
Test Case 7: บัญชีปลายทางไม่ถูกต้อง
•	Input: จำนวน Point: 1000, Passcode: 1234, บัญชีปลายทางไม่ถูกต้อง
•	Expected Result: ระบบแจ้งข้อผิดพลาด ไม่สามารถทำรายการได้ และไม่สามารถกรอก Passcode ได้
•	Technique: Equivalence Partitioning




3.	Software Testing มีความสำคัญอย่างไรในการพัฒนาระบบ
-	ในตำแหน่งของ Software Testing นั้นจะมีความสำคัญมากในการพัฒนาระบบ Application หรือ Software ใด Software หนึ่ง
เนื่องจากทำ Testing นั้นจะเป็นการตรวจสอบและยืนยันว่าตัว Software นั้นสามารถทำงานได้ตามที่คาดหวัง ไม่มีข้อบกพร่องใดๆ 
อีกทั้งยังเป็นการ Testing เพื่อที่จะปรับปรุงตัว Software ให้ดีขึ้น ลดความเสี่ยงที่อาจเกิดขึ้นระหว่างพัฒนาหรือพัฒนาเสร็จแล้ว 
โดยถ้าหากไม่มีการ Testing ระบบก่อนส่งมอบแล้วพบเจอปัญหาในตอนสุดท้ายจะทำให้เสียทั้ง Time Cost และหนักที่สุดคือเสีย Reliability จากผู้จ้างได้ 
ดังนั้นแล้วเราซึ่งควรมีการ Testing ในทุกๆขั้นตอนเพื่อดูว่า Software นั้นพัฒนาไปได้อย่างมีคุณภาพ


Test plan ทดสอบการโอนเงิน
BY Tester Lucky
บทนำ (Introduction)
	จุดประสงค์ของการจัดทำเอกสาร test plan นี้เพื่ออธิบายรายละเอียดของการทดสอบการโอนเงินไปยังบัญชีปลายทางและใช้เป็นแนวทางในการทำการทดสอบตามแผนงานที่วางไว้เพื่อตรวจสอบและมั่นใจว่า Software นี้ได้พัฒนามาอย่างมีคุณภาพและมีประสิทธิภาพ และ user ที่ใช้งานนี้ได้รับประสบการณ์การใช้งานที่ดี

วัตถุประสงค์ (Objective)
	ทดสอบการโอน Point จากบัญชีตัวเองไปยังบัญชีปลายทางตามเงื่อนไขที่กำหนด
•	ตรวจสอบการโอน Point ตามเงื่อนไขขั้นต่ำและสูงสุด
•	ตรวจสอบการคิดค่า Fee ในกรณีที่จำนวน Point ต่ำกว่าขั้นต่ำ
•	ตรวจสอบการกรอก Passcode 4 หลัก
•	ตรวจสอบความถูกต้องของบัญชีปลายทาง

ขอบเขตของการทดสอบ (Scope)
In Scope
•	การโอน Point 
•	การตรวจสอบ Passcode 
•	การตรวจสอบบัญชีปลายทาง 
•	การคิดค่า Fee
Out of Scope
•	การทำรายการอื่นๆ นอกเหนือจากการโอน Point
•	การจัดการบัญชีผู้ใช้

วิธีการทดสอบ (Test Approach)
•	ใช้เทคนิคต่างๆ เช่น Equivalence Partitioning, Boundary Value Analysis, Error Guessing เพื่อออกแบบ Test Case
•	ทดสอบทั้งในสภาวะปกติและสภาวะที่คาดว่าจะเกิดข้อผิดพลาด
เอกสาร และสิ่งที่นำส่งหลังจากดำเนินการทดสอบตามแผนงาน (Test Deliverables)
•	Test Case หรือ กรณีทดสอบ ที่ออกแบบไว้
•	Test Report ของการทดสอบตาม Test Case ที่ได้ออกแบบไว้
•	Bug Report หรือสิ่งที่ต้องแก้ไข ที่พบเจอในระหว่างการทำการทดสอบ Software

Test Environment และเครื่องมือที่ใช้ทำการทดสอบ
•	สภาพแวดล้อมที่จำลองเหมือนกับสภาพแวดล้อมการใช้งานจริง
•	ระบบฐานข้อมูลที่มีข้อมูลผู้ใช้และบัญชีปลายทางที่จำเป็น
•	Device: smartphone, Desktop, Laptop
•	Testing Tools: Robot Framework, Selenium

เกณฑ์ในการดำเนินการทดสอบ (Entry Criteria)
•	ระบบพร้อมสำหรับการทดสอบ, Test Case และ Test Data พร้อม
•	เครื่องมือที่ใช้ในการทดสอบพร้อมใช้งาน

เกณฑ์ในการประเมินผลการทดสอบ (Exit Criteria)
•	ทดสอบครบทุก Test Case 
•	ไม่มีข้อบกพร่องสำคัญที่ไม่ได้รับการแก้ไข
•	รายงานการทดสอบสมบูรณ์

ความเสี่ยงที่อาจเกิดขึ้น และแผนการลดความเสี่ยง (Risk and Contingencies)
•	อาจมีการเปลี่ยนแปลงข้อกำหนดในระหว่างการทดสอบ
•	ข้อผิดพลาดในการตั้งค่าสภาพแวดล้อมการทดสอบ

